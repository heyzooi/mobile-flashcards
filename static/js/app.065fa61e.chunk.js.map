{"version":3,"sources":["components/EditDeckScreen.js","actions/deck.js","storage/index.js","components/HomeScreen.js","reducers/index.js","reducers/deck.js","components/Card.js","components/DeckScreen.js","components/EditCardScreen.js","notifications.js","components/QuizScreen.js","App.js","web-build/register-service-worker.js"],"names":["styles","StyleSheet","create","label","fontSize","textInput","borderWidth","borderRadius","height","connect","decks","saveDeck","deck","type","route","params","navigation","isNewDeck","id","useState","name","setName","save","trim","length","goBack","setOptions","title","headerRight","Button","onPress","View","style","flex","backgroundColor","alignItems","justifyContent","Text","margin","flexDirection","marginTop","TextInput","placeholder","returnKeyType","autoFocus","onChange","e","nativeEvent","text","value","onSubmitEditing","saveDecks","a","async","AsyncStorage","setItem","JSON","stringify","removeItem","setNotificationId","notificationId","setDecks","deleteDeck","deckId","navigate","FlatList","data","Object","values","renderItem","item","Swipeable","renderRightActions","Animated","keyExtractor","useEffect","getItem","parse","ActivityIndicator","size","combineReducers","state","action","keys","toString","card","cards","cardId","editable","onSave","onFlip","animatedValueState","frontText","setFrontText","backText","setBackText","setValue","Value","animatedValue","addListener","interpolate","inputRange","outputRange","frontInterpolate","frontAnimatedStyle","transform","rotateX","backAnimatedStyle","flipCard","backfaceVisibility","backCard","position","top","frontTextInputRef","useRef","backTextInputRef","ref","showFront","spring","toValue","friction","tension","start","current","focus","deleteCard","container","takeQuiz","bottom","width","takeQuizText","SafeAreaView","contentContainerStyle","TouchableOpacity","push","saveCard","isNewCard","newCard","onPermissionGranted","cancelNotification","date","Date","setHours","Notifications","scheduleLocalNotificationAsync","body","ios","sound","_displayInForeground","android","sticky","time","getTime","repeat","localNotificationId","alert","cancelAllScheduledNotificationsAsync","reduce","result","setResult","showingBack","setShowingBack","unanswered","entries","filter","map","answers","correct","answer","incorrect","pop","currentCardKey","currentCard","submit","submitText","containerReply","reply","isCorrect","showingFront","store","createStore","rootReducer","applyMiddleware","thunk","logger","App","Permissions","status","permissions","scheduleNotifications","Stack","createStackNavigator","NavigationContainer","Navigator","Screen","component","HomeScreen","EditDeckScreen","DeckScreen","EditCardScreen","QuizScreen","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console"],"mappings":"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","file":"static/js/app.065fa61e.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { StyleSheet, Text, View, Button, TextInput } from 'react-native'\nimport { connect } from 'react-redux'\nimport { saveDeck } from '../actions/deck'\n\nconst styles = StyleSheet.create({\n    label: {\n        fontSize: 22\n    },\n    textInput: {\n        borderWidth: 1,\n        borderRadius: 5,\n        height: 40,\n    }\n});\n\nconst mapStateToProps = ({ decks }) => {\n    return {\n        decks\n    }\n}\n\nfunction NewDeckScreen({ route: { params: { deck } }, navigation, saveDeck }) {\n    const isNewDeck = deck.id == null\n    const [name, setName] = useState(deck.name || '')\n    const save = () => {\n        if (name.trim().length === 0) {\n            return\n        }\n        saveDeck({ name })\n        navigation.goBack()\n    }\n    navigation.setOptions({\n        title: isNewDeck ? 'New Deck' : 'Edit Deck',\n        headerRight: () => (\n            <Button\n                onPress={save}\n                title=\"Save\"\n            />\n        )\n    })\n    return (\n        <View style={{\n            flex: 1,\n            backgroundColor: '#fff',\n            alignItems: 'center',\n            justifyContent: 'flex-start',\n        }}>\n            <Text style={[styles.label, { margin: 8 }]}>{isNewDeck ? 'Give the Deck a name:' : \"Update the Deck's name:\"}</Text>\n            <View style={{ flexDirection: 'row', flex: 1, margin: 8, marginTop: 0 }}>\n                <TextInput style={[styles.textInput, { flex: 1 }]}\n                    placeholder={isNewDeck ? \"Name of your new deck\" : \"Change the name of your deck\"}\n                    returnKeyType={'done'}\n                    autoFocus={true}\n                    onChange={e => setName(e.nativeEvent.text)}\n                    value={name}\n                    onSubmitEditing={save}\n                />\n            </View>\n        </View>\n    )\n}\n\nexport default connect(mapStateToProps, { saveDeck })(NewDeckScreen)\n","\nexport const SAVE_DECK = 'SAVE_DECK'\nexport const SET_DECKS = 'SET_DECKS'\nexport const LOAD_DECK = 'LOAD_DECK'\nexport const SAVE_CARD = 'SAVE_CARD'\nexport const DELETE_CARD = 'DELETE_CARD'\nexport const DELETE_DECK = 'DELETE_DECK'\n\nexport function saveDeck(deck) {\n    return {\n        type: SAVE_DECK,\n        deck\n    }\n}\n\nexport function setDecks(decks) {\n    return {\n        type: SET_DECKS,\n        decks\n    }\n}\n\nexport function loadDeck(deck) {\n    return {\n        type: LOAD_DECK,\n        deck\n    }\n}\n\nexport function saveCard(deckId, card) {\n    return {\n        type: SAVE_CARD,\n        deckId,\n        card\n    }\n}\n\nexport function deleteCard(deckId, cardId) {\n    return {\n        type: DELETE_CARD,\n        deckId,\n        cardId\n    }\n}\n\nexport function deleteDeck(deckId) {\n    return {\n        type: DELETE_DECK,\n        deckId\n    }\n}\n","import { AsyncStorage } from 'react-native'\n\nconst DECKS = 'DECKS'\nconst NOTIFICATION_ID = 'NOTIFICATION_ID'\n\nexport async function loadDecks() {\n    return JSON.parse(await AsyncStorage.getItem(DECKS)) || {}\n}\n\nexport async function saveDecks(decks) {\n    if (decks) {\n        return await AsyncStorage.setItem(DECKS, JSON.stringify(decks))\n    } else {\n        return await AsyncStorage.removeItem(DECKS)\n    }\n}\n\nexport async function getNotificationId() {\n    return await AsyncStorage.getItem(NOTIFICATION_ID)\n}\n\nexport async function setNotificationId(notificationId) {\n    if (notificationId) {\n        return await AsyncStorage.setItem(NOTIFICATION_ID, notificationId)\n    } else {\n        return await AsyncStorage.removeItem(NOTIFICATION_ID)\n    }\n}\n","import React, { useEffect } from 'react';\nimport { FlatList, Button, Animated, ActivityIndicator } from 'react-native';\nimport { connect } from 'react-redux'\nimport { setDecks } from '../actions/deck'\nimport { loadDecks } from '../storage'\nimport { RectButton } from 'react-native-gesture-handler';\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\nimport { deleteDeck } from '../actions/deck'\n\nconst mapStateToProps = ({ decks }) => {\n    return {\n        decks\n    }\n}\n  \nfunction HomeScreen({ navigation, decks, setDecks, deleteDeck }) {\n    navigation.setOptions({\n        headerRight: () => (\n            <Button\n                onPress={() => navigation.navigate(\"Edit Deck\", { deck: {} }) }\n                title=\"Add New Deck\"\n            />\n        )\n    })\n    if (!decks) {\n        useEffect(() => {\n            (async () => {\n                const decks = await loadDecks()\n                setDecks(decks)\n            })()\n        })\n        return <ActivityIndicator size=\"large\"/>\n    }\n    return (\n        <FlatList\n            data={Object.values(decks)}\n            renderItem={({ item }) => {\n                const renderActions = () => {\n                    return (\n                      <RectButton onPress={() => deleteDeck(item.id)}>\n                        <Animated.Text>Delete</Animated.Text>\n                      </RectButton>\n                    );\n                };\n                return (\n                    <Swipeable renderRightActions={renderActions}>\n                        <Button \n                            onPress={() => navigation.navigate(\"Deck\", { deck: item }) }\n                            title={item.name}\n                        />\n                    </Swipeable>\n                )\n            }}\n            keyExtractor={deck => deck.id}\n        />\n    )\n}\n\nexport default connect(mapStateToProps, { setDecks, deleteDeck })(HomeScreen)\n","import { combineReducers } from 'redux'\nimport decks from './deck'\n\nexport default combineReducers({\n    decks\n})\n","import { SET_DECKS, SAVE_DECK, SAVE_CARD, DELETE_CARD, DELETE_DECK } from '../actions/deck'\nimport { saveDecks } from '../storage'\n\nexport default function decks(state = null, action) {\n    switch (action.type) {\n        case SET_DECKS:\n            return action.decks\n        case SAVE_DECK: {\n            const { deck } = action\n            if (!deck.id) {\n                deck.id = `deck-${(Object.keys(state || {}).length + 1).toString()}`\n            }\n            const decks = {\n                ...state,\n                [deck.id]: deck\n            }\n            saveDecks(decks)\n            return decks\n        }\n        case SAVE_CARD: {\n            const { deckId, card } = action\n            const deck = state[deckId]\n            if (!card.id) {\n                card.id = `card-${(Object.keys(deck.cards || {}).length + 1).toString()}`\n            }\n            const decks = {\n                ...state,\n                [deckId]: {\n                    ...deck,\n                    cards: {\n                        ...deck.cards,\n                        [card.id]: card\n                    }\n                }\n            }\n            saveDecks(decks)\n            return decks\n        }\n        case DELETE_CARD: {\n            const decks = {\n                ...state\n            }\n            delete decks[action.deckId].cards[action.cardId]\n            saveDecks(decks)\n            return decks\n        }\n        case DELETE_DECK: {\n            const decks = {\n                ...state\n            }\n            delete decks[action.deckId]\n            saveDecks(decks)\n            return decks\n        }\n        default:\n            return state\n    }\n}\n","import React, { useState, useRef } from 'react'\nimport { connect } from \"react-redux\";\nimport { View, TextInput, Animated, StyleSheet, Button } from 'react-native'\n\nfunction Card({ card, editable, onChange, onSave, onFlip, animatedValueState }) {\n    editable = editable || false\n    const [frontText, setFrontText] = editable ? useState(card.frontText || '') : [card.frontText]\n    const [backText, setBackText] = editable ? useState(card.backText || '') : [card.backText]\n    if (onChange) {\n        onChange({\n            frontText,\n            backText\n        })\n    }\n    const [value, setValue] = useState(0)\n    const [animatedValue] = animatedValueState || useState(new Animated.Value(0))\n    animatedValue.addListener(({ value }) => setValue(value))\n    const [frontInterpolate] = useState(animatedValue.interpolate({\n        inputRange: [0, 180],\n        outputRange: ['0deg', '180deg']\n    }))\n    const [backInterpolate] = useState(animatedValue.interpolate({\n        inputRange: [0, 180],\n        outputRange: ['180deg', '360deg']\n    }))\n    const frontAnimatedStyle = {\n        transform: [\n            { rotateX: frontInterpolate }\n        ]\n    }\n    const backAnimatedStyle = {\n        transform: [\n            { rotateX: backInterpolate }\n        ]\n    }\n    const styles = StyleSheet.create({\n        flipCard: {\n            backfaceVisibility: 'hidden',\n        },\n        backCard: {\n            position: 'absolute',\n            top: 0,\n        }\n    })\n    const frontTextInputRef = useRef()\n    const backTextInputRef = useRef()\n    const flipCard = () => {\n        const showFront = value >= 90\n        if (showFront) {\n            Animated.spring(animatedValue, {\n                toValue: 0,\n                friction: 8,\n                tension: 10\n            }).start()\n            if (editable) {\n                frontTextInputRef.current.focus()\n            }\n        } else {\n            Animated.spring(animatedValue, {\n                toValue: 180,\n                friction: 8,\n                tension: 10\n            }).start()\n            if (editable) {\n                backTextInputRef.current.focus()\n            }\n        }\n        if (onFlip) {\n            onFlip(showFront)\n        }\n    }\n    const save = () => {\n        if (onSave) {\n            onSave({\n                ...card,\n                frontText,\n                backText\n            })\n        }\n    }\n    return (\n        <View>\n            <Animated.View style={[frontAnimatedStyle, styles.flipCard]}>\n                <TextInput\n                    editable={editable}\n                    ref={frontTextInputRef}\n                    placeholder='Front Card Text'\n                    returnKeyType={'done'}\n                    autoFocus={true}\n                    onChange={e => setFrontText(e.nativeEvent.text)}\n                    value={frontText}\n                    onSubmitEditing={save}\n                />\n            </Animated.View>\n            <Animated.View style={[backAnimatedStyle, styles.flipCard, styles.backCard]}>\n                <TextInput\n                    editable={editable}\n                    ref={backTextInputRef}\n                    placeholder='Back Card Text'\n                    returnKeyType={'done'}\n                    onChange={e => setBackText(e.nativeEvent.text)}\n                    value={backText}\n                    onSubmitEditing={save}\n                />\n            </Animated.View>\n            <Button onPress={flipCard} title='Flip Card'/>\n        </View>\n    )\n}\n\nexport default connect()(Card)\n","import React from 'react'\nimport { FlatList, Button, Animated, StyleSheet, SafeAreaView, TouchableOpacity, Text } from 'react-native'\nimport { connect } from 'react-redux'\nimport Card from './Card'\nimport { RectButton } from 'react-native-gesture-handler';\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\nimport { deleteCard } from '../actions/deck'\n\nconst mapStateToProps = ({ decks }) => {\n    return {\n        decks\n    }\n}\n\nfunction DeckScreen({ route: { params: { deck: { id } }}, navigation, decks, deleteCard }) {\n    const deck = decks[id]\n    navigation.setOptions({\n        title: deck.name,\n        headerRight: () => (\n            <Button\n                onPress={() => navigation.navigate(\"Edit Card\", { deck, card: {} }) }\n                title=\"Add New Card\"\n            />\n        )\n    })\n    const styles = StyleSheet.create({\n        container: {\n            flexDirection: 'column',\n            justifyContent: 'flex-end',\n        },\n        takeQuiz: {\n            position: 'absolute',\n            bottom: 20,\n            width: '100%',\n            height: 40,\n            justifyContent: 'center',\n            alignItems: \"center\",\n        },\n        takeQuizText: {\n            fontSize: 30,\n        },\n    })\n    const cards = Object.values(deck.cards || {})\n    return (\n        <SafeAreaView style={[styles.container, { height: '100%' }]}>\n            <FlatList\n                contentContainerStyle={[{ height: '100%' }]}\n                data={cards}\n                renderItem={({ item }) => {\n                    const renderActions = () => {\n                        return (\n                        <RectButton onPress={() => deleteCard(id, item.id)}>\n                            <Animated.Text>Delete</Animated.Text>\n                        </RectButton>\n                        );\n                    };\n                    return (\n                        <Swipeable renderRightActions={renderActions}>\n                            <Card card={item}/>\n                        </Swipeable>\n                    )\n                }}\n                keyExtractor={card => card.id}\n            />\n            {cards.length > 0 && (\n                <TouchableOpacity style={[styles.takeQuiz]} onPress={() => navigation.push(\"Quiz\", { deck })}>\n                    <Text style={[styles.takeQuizText]}>Take a Quiz</Text>\n                </TouchableOpacity>\n            )}\n        </SafeAreaView>\n    )\n}\n\nexport default connect(mapStateToProps, { deleteCard })(DeckScreen)","import React, { useState, useRef } from 'react'\nimport { View, TextInput, Animated, StyleSheet, Button } from 'react-native'\nimport { connect } from 'react-redux'\nimport { saveCard } from '../actions/deck'\nimport Card from './Card'\n\nfunction EditCardScreen({\n    route: {\n        params: {\n            deck,\n            card,\n        }\n    },\n    navigation,\n    saveCard,\n}) {\n    const isNewCard = card.id == null\n    const save = (card) => {\n        if (card.frontText.trim().length === 0 || card.backText.trim().length === 0) {\n            return\n        }\n        saveCard(deck.id, card)\n        navigation.goBack() //goes back to the \"Deck\" screen\n    }\n    navigation.setOptions({\n        title: isNewCard ? 'New Card' : 'Edit Card',\n        headerRight: () => (\n            <Button\n                onPress={() => save(card)}\n                title=\"Save\"\n            />\n        )\n    })\n    return (\n        <Card card={card}\n            editable={true}\n            onChange={(newCard) => card = {\n                ...card,\n                ...newCard\n            }}\n            onSave={() => save(card)}\n        />\n    )\n}\n\nexport default connect(null, { saveCard })(EditCardScreen)","import * as Permissions from 'expo-permissions'\nimport { Notifications } from 'expo'\nimport { setNotificationId } from './storage'\n\nfunction createLocalNotification() {\n    return {\n        title: 'Quiz Reminder',\n        body: 'You have not yet complete a quiz today!',\n        ios: {\n            sound: true,\n            _displayInForeground: true,\n        },\n        android: {\n            sticky: false,\n        },\n    }\n}\n\nasync function onPermissionGranted() {\n    try {\n        await cancelNotification()\n        await setNotificationId(null)\n        const date = new Date()\n        date.setHours(20) //8pm\n        localNotificationId = await Notifications.scheduleLocalNotificationAsync(createLocalNotification(), {\n            time: date.getTime(),\n            repeat: 'day',\n        })\n        await setNotificationId(localNotificationId)\n    } catch (error) {\n        alert(error)\n    }\n}\n\nexport async function cancelNotification() {\n    await Notifications.cancelAllScheduledNotificationsAsync()\n}\n\nexport async function scheduleNotifications() {\n    try {\n        const { status } = await Permissions.getAsync(Permissions.NOTIFICATIONS)\n        if (status !== 'granted') {\n            const { status, permissions } = await Permissions.askAsync(Permissions.NOTIFICATIONS)\n            if (status !== 'granted') {\n                alert('👋 Please enable notifications so you can receive reminders every day.')\n                return\n            } else {\n                onPermissionGranted()\n            }\n        } else {\n            onPermissionGranted()\n        }\n    } catch (error) {\n        alert(error)\n    }\n}\n","import React, { useState } from 'react'\nimport { connect } from \"react-redux\"\nimport { View, StyleSheet, Button, Text, Animated } from 'react-native'\nimport Card from './Card'\nimport { cancelNotification } from '../notifications'\n\nfunction QuizScreen({ route: { params: { deck } }, navigation }) {\n    const [result, setResult] = useState(Object.keys(deck.cards).reduce((state, cardId) => ({\n        ...state,\n        [cardId]: null,\n    }), {}))\n    const [showingBack, setShowingBack] = useState(false)\n    const unanswered = Object.entries(result).filter(([_, value]) => value === null).map(([key]) => key)\n    const [animatedValue] = useState(new Animated.Value(0))\n    if (unanswered.length == 0) {\n        const answers = Object.values(result)\n        const correct = answers.filter((answer) => answer).length\n        const incorrect = (answers.length - correct) || 0\n        const submit = () => {\n            cancelNotification()\n            navigation.pop()\n        }\n        return (\n            <View>\n                <Text>{`Correct: ${correct}`}</Text>\n                <Text>{`Incorrect: ${incorrect}`}</Text>\n                <Text>{`Total: ${answers.length}`}</Text>\n                <Button onPress={submit} title='OK'/>\n            </View>\n        )\n    }\n    const currentCardKey = unanswered[0]\n    const currentCard = deck.cards[currentCardKey]\n    const styles = StyleSheet.create({\n        container: {\n            flexDirection: 'column',\n            justifyContent: 'flex-end',\n        },\n        submit: {\n            position: 'absolute',\n            bottom: 20,\n            width: '100%',\n            height: 40,\n            justifyContent: 'center',\n            alignItems: \"center\",\n        },\n        submitText: {\n            fontSize: 30,\n        },\n        containerReply: {\n            flexDirection: 'row',\n            justifyContent: 'space-evenly',\n        },\n    })\n    const reply = (isCorrect) => {\n        setResult({\n            ...result,\n            [currentCardKey]: isCorrect,\n        })\n        setShowingBack(false)\n        animatedValue.setValue(0)\n    }\n    return (\n        <View>\n            <Card\n                card={currentCard}\n                onFlip={(showingFront) => setShowingBack(!showingFront)}\n                animatedValueState={[animatedValue]}\n            />\n            {showingBack && (\n                <View style={styles.containerReply}>\n                    <Button style={styles.reply} onPress={() => reply(false)} title='Incorrect'/>\n                    <Button style={styles.reply} onPress={() => reply(true)} title='Correct'/>\n                </View>\n            )}\n        </View>\n    )\n}\n\nexport default connect()(QuizScreen)","import React from 'react';\nimport { NavigationContainer } from '@react-navigation/native'\nimport { createStackNavigator } from '@react-navigation/stack'\nimport EditDeckScreen from './components/EditDeckScreen'\nimport HomeScreen from './components/HomeScreen'\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer from './reducers'\nimport thunk from 'redux-thunk'\nimport DeckScreen from './components/DeckScreen';\nimport EditCardScreen from './components/EditCardScreen';\nimport QuizScreen from './components/QuizScreen';\nimport logger from 'redux-logger'\nimport { scheduleNotifications } from './notifications'\n\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger))\n\nexport default function App() {\n  scheduleNotifications()\n  const Stack = createStackNavigator();\n  return (\n    <NavigationContainer>\n      <Provider store={store}>\n        <Stack.Navigator>\n          <Stack.Screen name=\"FlashCards\" component={HomeScreen} />\n          <Stack.Screen name=\"Edit Deck\" component={EditDeckScreen} />\n          <Stack.Screen name=\"Deck\" component={DeckScreen} />\n          <Stack.Screen name=\"Edit Card\" component={EditCardScreen} />\n          <Stack.Screen name=\"Quiz\" component={QuizScreen} />\n        </Stack.Navigator>\n      </Provider>\n    </NavigationContainer>\n  );\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/mobile-flashcards/expo-service-worker.js', { scope: '/mobile-flashcards/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}