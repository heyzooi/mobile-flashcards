{"version":3,"sources":["components/EditDeckScreen.js","actions/deck.js","storage/index.js","components/HomeScreen.js","reducers/index.js","reducers/deck.js","components/Card.js","components/DeckScreen.js","components/EditCardScreen.js","components/QuizScreen.js","App.js","web-build/register-service-worker.js"],"names":["styles","StyleSheet","create","label","fontSize","textInput","borderWidth","borderRadius","height","connect","decks","saveDeck","deck","type","route","params","navigation","isNewDeck","id","useState","name","setName","save","goBack","setOptions","title","headerRight","Button","onPress","View","style","flex","backgroundColor","alignItems","justifyContent","Text","margin","flexDirection","marginTop","TextInput","placeholder","returnKeyType","autoFocus","onChange","e","nativeEvent","text","value","onSubmitEditing","saveDecks","a","async","AsyncStorage","setItem","JSON","stringify","removeItem","setDecks","deleteDeck","deckId","navigate","FlatList","data","Object","values","renderItem","item","Swipeable","renderRightActions","Animated","keyExtractor","useEffect","getItem","parse","ActivityIndicator","size","combineReducers","state","action","uuid","v4","card","cards","cardId","editable","onSave","onFlip","animatedValueState","frontText","setFrontText","backText","setBackText","setValue","Value","animatedValue","addListener","interpolate","inputRange","outputRange","frontInterpolate","frontAnimatedStyle","transform","rotateX","backAnimatedStyle","flipCard","backfaceVisibility","backCard","position","top","frontTextInputRef","useRef","backTextInputRef","ref","showFront","spring","toValue","friction","tension","start","current","focus","deleteCard","container","takeQuiz","bottom","width","takeQuizText","SafeAreaView","contentContainerStyle","length","TouchableOpacity","push","saveCard","isNewCard","trim","newCard","keys","reduce","result","setResult","showingBack","setShowingBack","unanswered","entries","filter","map","answers","correct","answer","incorrect","pop","currentCardKey","currentCard","submit","submitText","containerReply","reply","isCorrect","showingFront","store","createStore","rootReducer","applyMiddleware","thunk","next","console","group","log","getState","groupEnd","App","Stack","createStackNavigator","NavigationContainer","Navigator","Screen","component","HomeScreen","EditDeckScreen","DeckScreen","EditCardScreen","QuizScreen","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error"],"mappings":"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","file":"static/js/app.def0118e.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { StyleSheet, Text, View, Button, TextInput } from 'react-native'\nimport { connect } from 'react-redux'\nimport { saveDeck } from '../actions/deck'\n\nconst styles = StyleSheet.create({\n    label: {\n        fontSize: 22\n    },\n    textInput: {\n        borderWidth: 1,\n        borderRadius: 5,\n        height: 40,\n    }\n});\n\nconst mapStateToProps = ({ decks }) => {\n    return {\n        decks\n    }\n}\n\nfunction NewDeckScreen({ route: { params: { deck } }, navigation, saveDeck }) {\n    const isNewDeck = deck.id == null\n    const [name, setName] = useState(deck.name || '')\n    const save = () => {\n        saveDeck({ name })\n        navigation.goBack()\n    }\n    navigation.setOptions({\n        title: isNewDeck ? 'New Deck' : 'Edit Deck',\n        headerRight: () => (\n            <Button\n                onPress={save}\n                title=\"Save\"\n            />\n        )\n    })\n    return (\n        <View style={{\n            flex: 1,\n            backgroundColor: '#fff',\n            alignItems: 'center',\n            justifyContent: 'flex-start',\n        }}>\n            <Text style={[styles.label, { margin: 8 }]}>{isNewDeck ? 'Give the Deck a name:' : \"Update the Deck's name:\"}</Text>\n            <View style={{ flexDirection: 'row', flex: 1, margin: 8, marginTop: 0 }}>\n                <TextInput style={[styles.textInput, { flex: 1 }]}\n                    placeholder={isNewDeck ? \"Name of your new deck\" : \"Change the name of your deck\"}\n                    returnKeyType={'done'}\n                    autoFocus={true}\n                    onChange={e => setName(e.nativeEvent.text)}\n                    value={name}\n                    onSubmitEditing={save}\n                />\n            </View>\n        </View>\n    )\n}\n\nexport default connect(mapStateToProps, { saveDeck })(NewDeckScreen)\n","\nexport const SAVE_DECK = 'SAVE_DECK'\nexport const SET_DECKS = 'SET_DECKS'\nexport const LOAD_DECK = 'LOAD_DECK'\nexport const SAVE_CARD = 'SAVE_CARD'\nexport const DELETE_CARD = 'DELETE_CARD'\nexport const DELETE_DECK = 'DELETE_DECK'\n\nexport function saveDeck(deck) {\n    return {\n        type: SAVE_DECK,\n        deck\n    }\n}\n\nexport function setDecks(decks) {\n    return {\n        type: SET_DECKS,\n        decks\n    }\n}\n\nexport function loadDeck(deck) {\n    return {\n        type: LOAD_DECK,\n        deck\n    }\n}\n\nexport function saveCard(deckId, card) {\n    return {\n        type: SAVE_CARD,\n        deckId,\n        card\n    }\n}\n\nexport function deleteCard(deckId, cardId) {\n    return {\n        type: DELETE_CARD,\n        deckId,\n        cardId\n    }\n}\n\nexport function deleteDeck(deckId) {\n    return {\n        type: DELETE_DECK,\n        deckId\n    }\n}\n","import { AsyncStorage } from 'react-native'\n\nconst DECKS = 'DECKS'\n\nexport async function loadDecks() {\n    return JSON.parse(await AsyncStorage.getItem(DECKS)) || {}\n}\n\nexport async function saveDecks(decks) {\n    if (decks) {\n        return await AsyncStorage.setItem(DECKS, JSON.stringify(decks))\n    } else {\n        return await AsyncStorage.removeItem(DECKS)\n    }\n}\n","import React, { useEffect } from 'react';\nimport { FlatList, Button, Animated, ActivityIndicator } from 'react-native';\nimport { connect } from 'react-redux'\nimport { setDecks } from '../actions/deck'\nimport { loadDecks } from '../storage'\nimport { RectButton } from 'react-native-gesture-handler';\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\nimport { deleteDeck } from '../actions/deck'\n\nconst mapStateToProps = ({ decks }) => {\n    return {\n        decks\n    }\n}\n  \nfunction HomeScreen({ navigation, decks, setDecks, deleteDeck }) {\n    navigation.setOptions({\n        headerRight: () => (\n            <Button\n                onPress={() => navigation.navigate(\"Edit Deck\", { deck: {} }) }\n                title=\"Add New Deck\"\n            />\n        )\n    })\n    if (!decks) {\n        useEffect(() => {\n            (async () => {\n                const decks = await loadDecks()\n                setDecks(decks)\n            })()\n        })\n        return <ActivityIndicator size=\"large\"/>\n    }\n    return (\n        <FlatList\n            data={Object.values(decks)}\n            renderItem={({ item }) => {\n                const renderActions = () => {\n                    return (\n                      <RectButton onPress={() => deleteDeck(item.id)}>\n                        <Animated.Text>Delete</Animated.Text>\n                      </RectButton>\n                    );\n                };\n                return (\n                    <Swipeable renderRightActions={renderActions}>\n                        <Button \n                            onPress={() => navigation.navigate(\"Deck\", { deck: item }) }\n                            title={item.name}\n                        />\n                    </Swipeable>\n                )\n            }}\n            keyExtractor={deck => deck.id}\n        />\n    )\n}\n\nexport default connect(mapStateToProps, { setDecks, deleteDeck })(HomeScreen)\n","import { combineReducers } from 'redux'\nimport decks from './deck'\n\nexport default combineReducers({\n    decks\n})\n","import { SET_DECKS, SAVE_DECK, SAVE_CARD, DELETE_CARD, DELETE_DECK } from '../actions/deck'\nimport { saveDecks } from '../storage'\nimport uuid from 'react-native-uuid'\n\nexport default function decks(state = null, action) {\n    switch (action.type) {\n        case SET_DECKS:\n            return action.decks\n        case SAVE_DECK: {\n            const { deck } = action\n            if (!deck.id) {\n                deck.id = uuid.v4()\n            }\n            const decks = {\n                ...state,\n                [deck.id]: deck\n            }\n            saveDecks(decks)\n            return decks\n        }\n        case SAVE_CARD: {\n            const { deckId, card } = action\n            const deck = state[deckId]\n            if (!card.id) {\n                card.id = uuid.v4()\n            }\n            const decks = {\n                ...state,\n                [deckId]: {\n                    ...deck,\n                    cards: {\n                        ...deck.cards,\n                        [card.id]: card\n                    }\n                }\n            }\n            saveDecks(decks)\n            return decks\n        }\n        case DELETE_CARD: {\n            const decks = {\n                ...state\n            }\n            delete decks[action.deckId].cards[action.cardId]\n            saveDecks(decks)\n            return decks\n        }\n        case DELETE_DECK: {\n            const decks = {\n                ...state\n            }\n            delete decks[action.deckId]\n            saveDecks(decks)\n            return decks\n        }\n        default:\n            return state\n    }\n}\n","import React, { useState, useRef } from 'react'\nimport { connect } from \"react-redux\";\nimport { View, TextInput, Animated, StyleSheet, Button } from 'react-native'\n\nfunction Card({ card, editable, onChange, onSave, onFlip, animatedValueState }) {\n    editable = editable || false\n    const [frontText, setFrontText] = editable ? useState(card.frontText || '') : [card.frontText]\n    const [backText, setBackText] = editable ? useState(card.backText || '') : [card.backText]\n    if (onChange) {\n        onChange({\n            frontText,\n            backText\n        })\n    }\n    const [value, setValue] = useState(0)\n    const [animatedValue] = animatedValueState || useState(new Animated.Value(0))\n    animatedValue.addListener(({ value }) => setValue(value))\n    const [frontInterpolate] = useState(animatedValue.interpolate({\n        inputRange: [0, 180],\n        outputRange: ['0deg', '180deg']\n    }))\n    const [backInterpolate] = useState(animatedValue.interpolate({\n        inputRange: [0, 180],\n        outputRange: ['180deg', '360deg']\n    }))\n    const frontAnimatedStyle = {\n        transform: [\n            { rotateX: frontInterpolate }\n        ]\n    }\n    const backAnimatedStyle = {\n        transform: [\n            { rotateX: backInterpolate }\n        ]\n    }\n    const styles = StyleSheet.create({\n        flipCard: {\n            backfaceVisibility: 'hidden',\n        },\n        backCard: {\n            position: 'absolute',\n            top: 0,\n        }\n    })\n    const frontTextInputRef = useRef()\n    const backTextInputRef = useRef()\n    const flipCard = () => {\n        const showFront = value >= 90\n        if (showFront) {\n            Animated.spring(animatedValue, {\n                toValue: 0,\n                friction: 8,\n                tension: 10\n            }).start()\n            if (editable) {\n                frontTextInputRef.current.focus()\n            }\n        } else {\n            Animated.spring(animatedValue, {\n                toValue: 180,\n                friction: 8,\n                tension: 10\n            }).start()\n            if (editable) {\n                backTextInputRef.current.focus()\n            }\n        }\n        if (onFlip) {\n            onFlip(showFront)\n        }\n    }\n    const save = () => {\n        if (onSave) {\n            onSave({\n                ...card,\n                frontText,\n                backText\n            })\n        }\n    }\n    return (\n        <View>\n            <Animated.View style={[frontAnimatedStyle, styles.flipCard]}>\n                <TextInput\n                    editable={editable}\n                    ref={frontTextInputRef}\n                    placeholder='Front Card Text'\n                    returnKeyType={'done'}\n                    autoFocus={true}\n                    onChange={e => setFrontText(e.nativeEvent.text)}\n                    value={frontText}\n                    onSubmitEditing={save}\n                />\n            </Animated.View>\n            <Animated.View style={[backAnimatedStyle, styles.flipCard, styles.backCard]}>\n                <TextInput\n                    editable={editable}\n                    ref={backTextInputRef}\n                    placeholder='Back Card Text'\n                    returnKeyType={'done'}\n                    onChange={e => setBackText(e.nativeEvent.text)}\n                    value={backText}\n                    onSubmitEditing={save}\n                />\n            </Animated.View>\n            <Button onPress={flipCard} title='Flip Card'/>\n        </View>\n    )\n}\n\nexport default connect()(Card)\n","import React from 'react'\nimport { FlatList, Button, Animated, StyleSheet, SafeAreaView, TouchableOpacity, Text } from 'react-native'\nimport { connect } from 'react-redux'\nimport Card from './Card'\nimport { RectButton } from 'react-native-gesture-handler';\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\nimport { deleteCard } from '../actions/deck'\n\nconst mapStateToProps = ({ decks }) => {\n    return {\n        decks\n    }\n}\n\nfunction DeckScreen({ route: { params: { deck: { id } }}, navigation, decks, deleteCard }) {\n    const deck = decks[id]\n    navigation.setOptions({\n        title: deck.name,\n        headerRight: () => (\n            <Button\n                onPress={() => navigation.navigate(\"Edit Card\", { deck, card: {} }) }\n                title=\"Add New Card\"\n            />\n        )\n    })\n    const styles = StyleSheet.create({\n        container: {\n            flexDirection: 'column',\n            justifyContent: 'flex-end',\n        },\n        takeQuiz: {\n            position: 'absolute',\n            bottom: 20,\n            width: '100%',\n            height: 40,\n            justifyContent: 'center',\n            alignItems: \"center\",\n        },\n        takeQuizText: {\n            fontSize: 30,\n        },\n    })\n    const cards = Object.values(deck.cards || {})\n    return (\n        <SafeAreaView style={[styles.container]}>\n            <FlatList\n                contentContainerStyle={{ height: '100%' }}\n                data={cards}\n                renderItem={({ item }) => {\n                    const renderActions = () => {\n                        return (\n                        <RectButton onPress={() => deleteCard(id, item.id)}>\n                            <Animated.Text>Delete</Animated.Text>\n                        </RectButton>\n                        );\n                    };\n                    return (\n                        <Swipeable renderRightActions={renderActions}>\n                            <Card card={item}/>\n                        </Swipeable>\n                    )\n                }}\n                keyExtractor={card => card.id}\n            />\n            {cards.length > 0 && (\n                <TouchableOpacity style={[styles.takeQuiz]} onPress={() => navigation.push(\"Quiz\", { deck })}>\n                    <Text style={[styles.takeQuizText]}>Take a Quiz</Text>\n                </TouchableOpacity>\n            )}\n        </SafeAreaView>\n    )\n}\n\nexport default connect(mapStateToProps, { deleteCard })(DeckScreen)","import React, { useState, useRef } from 'react'\nimport { View, TextInput, Animated, StyleSheet, Button } from 'react-native'\nimport { connect } from 'react-redux'\nimport { saveCard } from '../actions/deck'\nimport Card from './Card'\n\nfunction EditCardScreen({\n    route: {\n        params: {\n            deck,\n            card,\n        }\n    },\n    navigation,\n    saveCard,\n}) {\n    const isNewCard = card.id == null\n    const save = (card) => {\n        if (card.frontText.trim().length === 0 || card.backText.trim().length === 0) {\n            return\n        }\n        saveCard(deck.id, card)\n        navigation.goBack()\n    }\n    navigation.setOptions({\n        title: isNewCard ? 'New Card' : 'Edit Card',\n        headerRight: () => (\n            <Button\n                onPress={() => save(card)}\n                title=\"Save\"\n            />\n        )\n    })\n    return (\n        <Card card={card}\n            editable={true}\n            onChange={(newCard) => card = {\n                ...card,\n                ...newCard\n            }}\n            onSave={() => save(card)}\n        />\n    )\n}\n\nexport default connect(null, { saveCard })(EditCardScreen)","import React, { useState } from 'react'\nimport { connect } from \"react-redux\"\nimport { View, StyleSheet, Button, Text, Animated } from 'react-native'\nimport Card from './Card'\n\nfunction QuizScreen({ route: { params: { deck } }, navigation }) {\n    const [result, setResult] = useState(Object.keys(deck.cards).reduce((state, cardId) => ({\n        ...state,\n        [cardId]: null,\n    }), {}))\n    const [showingBack, setShowingBack] = useState(false)\n    const unanswered = Object.entries(result).filter(([_, value]) => value === null).map(([key]) => key)\n    const [animatedValue] = useState(new Animated.Value(0))\n    if (unanswered.length == 0) {\n        const answers = Object.values(result)\n        const correct = answers.filter((answer) => answer).length\n        const incorrect = (answers.length - correct) || 0\n        const submit = () => {\n            navigation.pop()\n        }\n        return (\n            <View>\n                <Text>{`Correct: ${correct}`}</Text>\n                <Text>{`Incorrect: ${incorrect}`}</Text>\n                <Text>{`Total: ${answers.length}`}</Text>\n                <Button onPress={submit} title='OK'/>\n            </View>\n        )\n    }\n    const currentCardKey = unanswered[0]\n    const currentCard = deck.cards[currentCardKey]\n    const styles = StyleSheet.create({\n        container: {\n            flexDirection: 'column',\n            justifyContent: 'flex-end',\n        },\n        submit: {\n            position: 'absolute',\n            bottom: 20,\n            width: '100%',\n            height: 40,\n            justifyContent: 'center',\n            alignItems: \"center\",\n        },\n        submitText: {\n            fontSize: 30,\n        },\n        containerReply: {\n            flexDirection: 'row',\n            justifyContent: 'space-evenly',\n        },\n    })\n    const reply = (isCorrect) => {\n        setResult({\n            ...result,\n            [currentCardKey]: isCorrect,\n        })\n        setShowingBack(false)\n        animatedValue.setValue(0)\n    }\n    return (\n        <View>\n            <Card\n                card={currentCard}\n                onFlip={(showingFront) => setShowingBack(!showingFront)}\n                animatedValueState={[animatedValue]}\n            />\n            {showingBack && (\n                <View style={styles.containerReply}>\n                    <Button style={styles.reply} onPress={() => reply(false)} title='Incorrect'/>\n                    <Button style={styles.reply} onPress={() => reply(true)} title='Correct'/>\n                </View>\n            )}\n        </View>\n    )\n}\n\nexport default connect()(QuizScreen)","import React from 'react';\nimport { NavigationContainer } from '@react-navigation/native'\nimport { createStackNavigator } from '@react-navigation/stack'\nimport EditDeckScreen from './components/EditDeckScreen'\nimport HomeScreen from './components/HomeScreen'\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer from './reducers'\nimport thunk from 'redux-thunk'\nimport DeckScreen from './components/DeckScreen';\nimport EditCardScreen from './components/EditCardScreen';\nimport QuizScreen from './components/QuizScreen';\n\nconst logger = (store) => (next) => (action) => {\n  console.group(action.type)\n      console.log('Action:', action)\n      const result = next(action)\n      console.log('New State:', store.getState())\n  console.groupEnd()\n  return result\n}\n\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger))\n\nexport default function App() {\n  const Stack = createStackNavigator();\n  return (\n    <NavigationContainer>\n      <Provider store={store}>\n        <Stack.Navigator>\n          <Stack.Screen name=\"FlashCards\" component={HomeScreen} />\n          <Stack.Screen name=\"Edit Deck\" component={EditDeckScreen} />\n          <Stack.Screen name=\"Deck\" component={DeckScreen} />\n          <Stack.Screen name=\"Edit Card\" component={EditCardScreen} />\n          <Stack.Screen name=\"Quiz\" component={QuizScreen} />\n        </Stack.Navigator>\n      </Provider>\n    </NavigationContainer>\n  );\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}